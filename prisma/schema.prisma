generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model AllowedEmail {
  email String @id @unique
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  twoFA_key     String?
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(uuid())
  email String
  token      String
  expires    DateTime
  deletedAt  DateTime?
 
  @@unique([email, token])
  @@map("verification_tokens")
}

model Portfolio {
  id String @id @default(uuid())
  name String
  description String
  isPrivate Boolean @default(false)
  linkRepo String?
  imageId String?
  image String?
  isShow Boolean @default(true)
  completedAt DateTime?
  started DateTime
  ended DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model HistoryOfUpdatingPortfolio {
  id String @id @default(uuid())
  lastUpdate DateTime
}

enum SocialMediaTYPE {
  GITHUB
  YOUTUBE
  INSTAGRAM
  WEBSITE
}

model SocialMedia {
  id String @id @default(uuid())
  type SocialMediaTYPE @default(WEBSITE)
  name String
  link String @unique
}

model ContactMessage {
  id String @id @default(uuid())
  from String
  phoneNumber String? @db.VarChar(10)
  email String
  message String
}

model WorkExperience {
  id String @id @default(uuid())
  companyName String
  companyAddress String
  position String
  started DateTime
  ended DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

model Article {
  id String @id @default(uuid())

}

model HistoryOfSendingMessage {
  id String @id @default(uuid())
  ip String @unique
  count Int
  createdAt DateTime
  updatedAt DateTime
}

enum ErrorType {
  ERROR
  WARNING
}

model ErrorLog {
  id String @id @default(uuid())
  type ErrorType @default(ERROR)
  message String
}